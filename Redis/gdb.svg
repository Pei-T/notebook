<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.43.0 (0)
 -->
<!-- Title: Created by: Tarun Sharma (tarun27sh@gmail.com) Pages: 1 -->
<svg width="248pt" height="104pt"
 viewBox="0.00 0.00 247.58 103.80" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">

<script>
<![CDATA[

        class Node {
            constructor(name) {
                this.name = name;
                this.parents = [];
                this.children = [];
                this.visited = false;
            }
        };
        var graph = [];

        function showNeighboursFast(nodeId) {
            node = graph[nodeId];
            if (node) {
                console.log('FAST: #of P=' + node.parents.length + '#of Ch=' + node.children.length);
                for(var i = node.parents.length - 1; i >= 0; i--) {
                    var neighElement =  document.getElementById(node.parents[i]);
                    if (neighElement) {
                        var inner_polygon = neighElement.getElementsByTagName('polygon');
                        inner_polygon[0].setAttribute("style", "fill: orange");
                    }
                }
                for(var i = node.children.length - 1; i >= 0; i--) {
                    var neighElement =  document.getElementById(node.children[i]);
                    if (neighElement) {
                        var inner_polygon = neighElement.getElementsByTagName('polygon');
                        inner_polygon[0].setAttribute("style", "fill: cyan");
                    }
                }
            }
        }

        function showNeighboursInfluenceFast(nodeId, visitParents, visitChildren, level) {
            // recursively, find all parents, chidlren and highlight them
            //console.log('node = ' + nodeId + 'P?=' + visitParents + 'C?=' + visitChildren);
            var node = graph[nodeId];
            if (node && !node.visited) {
                node.visited = true;
                level++;
                console.log(level + 'node = ' + node.name + '#of P = ' + node.parents.length + '#of Ch = ' + node.children.length);
                

                if (visitParents && node.parents && node.parents.length > 0) {
                    for(var i = node.parents.length - 1; i >= 0; i--) {
                        var neighElement =  document.getElementById(node.parents[i]);
                        if (neighElement) {
                            var inner_polygon = neighElement.getElementsByTagName('polygon');
                            inner_polygon[0].setAttribute("style", "fill: orange");

                            var inner_text = neighElement.getElementsByTagName('text');
                            inner_text[0].setAttribute("style", "fill: black");
                            
                            showNeighboursInfluenceFast(node.parents[i], true, false, level);
                        }
                    }
                }

                if (visitChildren && node.children && node.children.length > 0) {
                    for(var i = node.children.length - 1; i >= 0; i--) {
                        var neighElement =  document.getElementById(node.children[i]);
                        if (neighElement) {
                            var inner_polygon = neighElement.getElementsByTagName('polygon');
                            inner_polygon[0].setAttribute("style", "fill: cyan");

                            var inner_text = neighElement.getElementsByTagName('text');
                            inner_text[0].setAttribute("style", "fill: black");


                            showNeighboursInfluenceFast(node.children[i], false, true, level);
                        }
                    }
                }
            }
            return;
        }

        function nodeClick(element) {
            //showNeighboursFast(element.id);
            showNeighboursInfluenceFast(element.id, true, true, 0);
            var inner_polygon = element.getElementsByTagName('polygon');
            var inner_text = element.getElementsByTagName('text');
            inner_polygon[0].setAttribute("style", "fill: yellow");
            inner_text[0].setAttribute("style", "fill: black");
        }

        function printGraphElements() {
            for (var key in graph) {
                console.log('key=' + key + '; value=' + graph[key]);
            }            
        }

        // graph[node] = [edge1, edg2 etc...]
        function constructGraph() {
            console.log('FAST: constructing graph');
            edges = document.getElementsByClassName("edge");
            for (var i=edges.length - 1; i>0; i--) {
                var node0, node1;
                nodes = edges[i].id.split('|')
                node0 = nodes[0];
                node1 = nodes[1];
                if (!graph[node0]) {
                    graph[node0] = new Node(node0);
                }
                graph[node0].children.push(node1);

                if (!graph[node1]) {
                    graph[node1] = new Node(node1);
                }
                graph[node1].parents.push(node0);
            }
            printGraphElements();
        }

        window.addEventListener('load',function(){
            console.log('Add onclick property to all nodes');
            nodes = document.getElementsByClassName("node");
            for(var i = nodes.length - 1; i >= 0; i--) {
                nodes[i].setAttribute("onclick", 'nodeClick(this)');
            }
            constructGraph();
        })
]]>
</script>
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 99.8)">
<title>Created by: Tarun Sharma (tarun27sh@gmail.com)</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-99.8 243.58,-99.8 243.58,4 -4,4"/>
<!-- redisConnectWithTimeout -->
<g id="redisConnectWithTimeout" class="node">
<title>redisConnectWithTimeout</title>
<g id="a_redisConnectWithTimeout"><a xlink:title="hiredis.c:857&#10;&#13;ip=0x55555555802e &quot;0.0.0.0&quot;, port=6379, tv=...&#10;&#13;">
<polygon fill="cornflowerblue" stroke="black" stroke-width="0" points="239.57,-36 111.62,-36 111.62,0 239.57,0 239.57,-36"/>
<text text-anchor="middle" x="175.59" y="-14.4" font-family="Consolas" font-size="12.00" fill="white">redisConnectWithTimeout</text>
</a>
</g>
</g>
<!-- main -->
<g id="main" class="node">
<title>main</title>
<g id="a_main"><a xlink:title="hiredis.cpp:110&#10;&#13;argc=1, argv=0x7fffffffdfd8&#10;&#13;">
<polygon fill="cornflowerblue" stroke="black" stroke-width="0" points="64.8,-36 10.8,-36 10.8,0 64.8,0 64.8,-36"/>
<text text-anchor="middle" x="37.8" y="-14.4" font-family="Consolas" font-size="12.00" fill="white">main</text>
</a>
</g>
</g>
<!-- main&#45;&gt;redisConnectWithTimeout -->
<g id="main|redisConnectWithTimeout" class="edge">
<title>main&#45;&gt;redisConnectWithTimeout</title>
<path fill="none" stroke="grey" d="M64.98,-18C75.61,-18 88.46,-18 101.57,-18"/>
<polygon fill="grey" stroke="grey" points="101.6,-21.5 111.6,-18 101.6,-14.5 101.6,-21.5"/>
</g>
<g id="node3" class="node">
<title></title>
<polygon fill="#ffd700" stroke="black" stroke-width="0" points="75.41,-95.6 0.2,-95.6 0.2,-54.4 75.41,-54.4 75.41,-95.6"/>
<text text-anchor="middle" x="37.8" y="-79.2" font-family="Consolas" font-size="14.00">Nodes = 2</text>
<text text-anchor="middle" x="37.8" y="-62.4" font-family="Consolas" font-size="14.00"> Edges = 1</text>
</g>
</g>
</svg>
